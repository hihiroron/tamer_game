def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

// decode dart-define
// def dartEnvironmentVariables = [:];
// if (project.hasProperty('dart-defines')) {
//     dartEnvironmentVariables = dartEnvironmentVariables + project.property('dart-defines')
//         .split(',')
//         .collectionEntries { entry ->
//             def pair = new String(entry.decodeBase64(), 'UTF-8').split('=')
//             [(pair.first()): pair.last()]
//         }
// }

// Icon copy task
// task copySources(type: Copy) {
//     from "src/${dartEnvironmentVariables.FLAVOR}/res"
//     into 'src/main/res'
// }

// Firebase settings copy task
// task selectGoogleServicesJson(type: Copy) {
//         from "google-services.json"
//     // from "src/${dartEnvironmentVariables.FLAVOR}/google-services.json"
//     into './'
// }

// add task
// tasks.whenTaskAdded { task ->
//     task.dependsOn copySources
//     if (task.name == 'processDebugGoogleServices' || task.name == 'processReleaseGoogleServices') {
//         task.dependsOn selectGoogleServicesJson
//     }
// }

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.gms.google-services'

android {
    namespace "com.example.tamer_game"
    compileSdkVersion 33
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.tamer_game"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion 21
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
    aaptOptions {
        noCompress "tflite"
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.3.0'
    // implementation 'org.tensorflow.:tensorflow-lite:2.4.0'
    implementation(platform("com.google.firebase:firebase-bom:32.2.3"))
    implementation("com.google.firebase:firebase-analytics-ktx")
}
